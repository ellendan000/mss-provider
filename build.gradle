buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/release/' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
//        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7"
    }
}
plugins {
    id 'net.ltgt.apt' version '0.20'
}
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'net.ltgt.apt'
apply plugin: 'net.ltgt.apt-idea'
//apply plugin: 'org.sonarqube'

sourceCompatibility = 1.8
targetCompatibility = 1.8

pmd {
    toolVersion = "6.8.0"
    ruleSetFiles = files('config/pmd-ruleSets.xml')
    ruleSets = []
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/release/' }
}

ext {
    lib = [
            springBoot : [
                    'org.springframework.boot:spring-boot-starter-web',
                    'org.springframework.boot:spring-boot-starter-data-jpa',
                    'org.springframework.boot:spring-boot-starter-validation',
                    'org.springframework.boot:spring-boot-starter-actuator',
                    'org.springframework.boot:spring-boot-starter-security',
            ],
            springCloud: [
                    'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client',
                    'org.springframework.cloud:spring-cloud-starter-openfeign',
                    'org.springframework.cloud:spring-cloud-starter-netflix-hystrix',
                    'org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard',
                    'io.github.openfeign.form:feign-form:3.5.0',
            ],
            db         : [
                    'mysql:mysql-connector-java',
                    'org.flywaydb:flyway-core',
                    'org.apache.tomcat:tomcat-jdbc:9.0.20'
            ],
            commons    : [
                    'commons-lang:commons-lang:2.6',
                    'commons-io:commons-io:2.6'
            ],
            utils      : [
                    'com.google.guava:guava:27.0.1-jre',
                    'org.modelmapper:modelmapper:2.3.0'
            ],
            basicTest  : [
                    'org.junit.jupiter:junit-jupiter-api',
                    'org.junit.jupiter:junit-jupiter-params',
                    'org.junit.jupiter:junit-jupiter-engine',
                    "org.mockito:mockito-core:${mokitoVersion}",
                    "org.mockito:mockito-junit-jupiter:${mokitoVersion}",
            ],
            integTest  : [
                    'org.springframework.boot:spring-boot-starter-test',
                    'io.rest-assured:rest-assured:3.2.0',
                    'io.rest-assured:spring-mock-mvc:3.2.0'
            ],
            dbTest     : [
                    'com.h2database:h2:1.4.199'
            ],
            swagger    : [
                    'io.springfox:springfox-swagger2:2.9.2',
                    'io.springfox:springfox-swagger-ui:2.9.2'
            ],
            aws        : [
                    'com.amazonaws:aws-java-sdk-secretsmanager'
            ]
    ]
}

dependencyManagement {
    imports {
        mavenBom "org.junit:junit-bom:${junitVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "com.amazonaws:aws-java-sdk-bom:${awsSDKVersion}"
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "org.mapstruct:mapstruct-jdk8:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    implementation lib.springBoot, lib.springCloud, lib.db, lib.utils, lib.commons, lib.swagger, lib.aws
    testImplementation lib.basicTest, lib.integTest, lib.dbTest
}

sourceSets {
    test {
        java.srcDirs file('src/test/java'), file('src/test-integration/java')
        resources.srcDirs file('src/test/resources'), file('src/test-integration/resources')
    }
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.2"
}

test.finalizedBy jacocoTestReport
jacocoTestReport.finalizedBy jacocoTestCoverageVerification

def classFiles = { classDirectories ->
    files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
                'cn/shadow/mss/provider/**/exception/*',
                'cn/shadow/mss/provider/**/constant/*',
                'cn/shadow/mss/provider/**/configuration/*',
                'cn/shadow/mss/provider/**/advice/*',
                'cn/shadow/mss/provider/**/*MapperImpl*',
                'cn/shadow/mss/provider/infrastructure/aws/secrets/manager/*',
        ])
    })
}
jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories = classFiles(classDirectories)
    }
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.95
            }
        }

        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.95
            }
        }
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = classFiles(classDirectories)
    }
}